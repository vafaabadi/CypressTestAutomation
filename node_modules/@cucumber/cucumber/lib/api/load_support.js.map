{"version":3,"file":"load_support.js","sourceRoot":"","sources":["../../src/api/load_support.ts"],"names":[],"mappings":";;;AAAA,iDAAgD;AAGhD,oCAAuC;AAEvC,uCAAiD;AACjD,+CAAgD;AAChD,qDAAgD;AAChD,uCAAoD;AAEpD;;;;;;GAMG;AACI,KAAK,UAAU,WAAW,CAC/B,OAA4B,EAC5B,cAA+B,EAAE;IAEjC,MAAM,iBAAiB,GAAG,IAAA,8BAAgB,EAAC,WAAW,CAAC,CAAA;IACvD,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,iBAAiB,CAAA;IAChD,MAAM,MAAM,GAAY,IAAI,8BAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;IACxD,MAAM,KAAK,GAAG,sBAAW,CAAC,IAAI,EAAE,CAAA;IAChC,MAAM,aAAa,GAAG,MAAM,IAAA,kCAAwB,GAAE,CAAA;IACtD,MAAM,aAAa,GAAG,MAAM,IAAA,oBAAY,EACtC,MAAM,EACN,GAAG,EACH,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,OAAO,CAChB,CAAA;IACD,aAAa,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAA;IAClD,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,aAAa,CAAA;IACnD,MAAM,kBAAkB,GAAG,MAAM,IAAA,+BAAqB,EAAC;QACrD,GAAG;QACH,KAAK;QACL,cAAc,EAAE,OAAO,CAAC,OAAO,CAAC,cAAc;QAC9C,YAAY;QACZ,WAAW;KACZ,CAAC,CAAA;IACF,MAAM,aAAa,CAAC,OAAO,EAAE,CAAA;IAC7B,OAAO,kBAAkB,CAAA;AAC3B,CAAC;AA1BD,kCA0BC","sourcesContent":["import { IdGenerator } from '@cucumber/messages'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { ILogger } from '../logger'\nimport { resolvePaths } from '../paths'\nimport { ILoadSupportOptions, IRunEnvironment } from './types'\nimport { getSupportCodeLibrary } from './support'\nimport { mergeEnvironment } from './environment'\nimport { ConsoleLogger } from './console_logger'\nimport { initializeForLoadSupport } from './plugins'\n\n/**\n * Load support code for use in test runs.\n *\n * @public\n * @param options - Subset of `IRunnableConfiguration` required to find the support code.\n * @param environment - Project environment.\n */\nexport async function loadSupport(\n  options: ILoadSupportOptions,\n  environment: IRunEnvironment = {}\n): Promise<ISupportCodeLibrary> {\n  const mergedEnvironment = mergeEnvironment(environment)\n  const { cwd, stderr, debug } = mergedEnvironment\n  const logger: ILogger = new ConsoleLogger(stderr, debug)\n  const newId = IdGenerator.uuid()\n  const pluginManager = await initializeForLoadSupport()\n  const resolvedPaths = await resolvePaths(\n    logger,\n    cwd,\n    options.sources,\n    options.support\n  )\n  pluginManager.emit('paths:resolve', resolvedPaths)\n  const { requirePaths, importPaths } = resolvedPaths\n  const supportCodeLibrary = await getSupportCodeLibrary({\n    cwd,\n    newId,\n    requireModules: options.support.requireModules,\n    requirePaths,\n    importPaths,\n  })\n  await pluginManager.cleanup()\n  return supportCodeLibrary\n}\n"]}